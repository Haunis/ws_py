
树：
    是一种抽象数据类型(ADT)，用来模拟具有树状结构性质的数据集合
    不是线性表那种一维结构，树是一种二维结构

树具有以下特点：
    1.每个节点有0个或多个子节点
    2.没有父节点的节点称为根节点
    3.每一个非根节点有且只有一个父节点
    4.除了根节点外，每个子节点可以分为多个不相交的树（就是子节点和其子结点的子结点可以形成不相交的树）

树的术语：
    节点的度：节点的子树个数； 就是该节点有几个子结点
    树的度：所有节点的度中，最大的节点的度就是树的度； 就是所有的节点中(包括根节点)谁的子结点最多，谁就代表整个树的度
    叶节点/终端节点：度为0的节点； 就是没有子结点的节点
    父节点：某个节点的上一级
    子节点：某个节点的下一级
    兄弟节点：同一个父节点的节点
    节点的层次： 从根开始，根是第1层，根节点的子结点为第2层，以此类推第3层...
    树的高度或深度：就是节点的层次最大到几层
    堂兄弟节点：父节点在同一个层次的节点互为堂兄弟节点； 就是有同一个爷爷的节点
    节点的祖先：从根节点到该节点所经过的所有节点； 就是父节点，父节点的父节点...一直到根节点都是该节点的祖先
    子孙：以某节点为根节点的子树中任一节点都称为该节点的子孙： 就是该节点的子结点，以及子结点的子节点...都是该节点的子孙
    森林：多个互不相交的树的集合就称为森林

树的种类：
    无序树/自由树：树中任意节点和其子结点之间没有顺序关系。  没有研究价值
    有序树：树中任意节点和其子结点之间有顺序关系
        1.二叉树：每个节点最多有两个子树的树； 就是树的度最多为2
            完全二叉树：设树的高度为h,除了h层外，其他各层(1~h-1)的所有节点数都达到最大；  就是除了最底层，其他上层节点都满了
            满二叉树：都满了
            平衡二叉树(AVL树)：任何节点的子树高度差不大于1的二叉树 （如果一个节点a只有一个节点b，则b不能有子节点。因为a的另一个数高度为0）
            排序二叉树(二叉查找树)：去遍历树的时候，树中的节点是有序的； 如：对于任何一个节点，其左边的节点都比其小，右边的节点都比其大
        2.霍夫曼树：用于信息编码；带权路径最短的二叉树称为霍夫曼树或最优二叉树(暂不研究)
        3.B树：对读写操作进行优化的自平衡的二叉查找树，能保持数据有序，拥有多余两个子树(暂不研究)


树的存储：
    顺序表存储：将数据结构存储在固定数组中，遍历有一定优势，但占用空间大()，是非主流二叉树
    链表存储：通常采用该方式

