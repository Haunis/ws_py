#!/usr/bin/python3

"""
id()--获取对象(实体)内存地址
    对此函数的理解,python中皆为对象,包括像1 2 3
    如id(3)获取的是对象实体的地址(堆内存中的地址)
    简单理解python和java一样(和C++指针传递很像,都是使用一个新变量指向同一个实体)

所以函数传递如add(2),不是把2这个值传递过去,是把指向2的对象引用(比如是temp)传递过去.
函数接收处add(num),用新变量num接收temp,num指向temp的实体,也就是2
就是说用新变量指向同一个对象实体)(*)

这个和c/c++不一样,c/c++中&是直接获取变量的内存地址,变量是指针就获取指针的内存地址,变量是实体对象获取的就是实体对象的地址

对于赋值语句，不同语言有不同的含义：
    a = 200;
        c/c++: a是一个变量，变量里存200，简单理解a和200绑定在一块，a就是200的别名；假如&a = 0x1111
        python/java: a是一个变量，变量指向200，简单理解a和200分开存储，a指向200;假如id(a)=0x1111
    a = 300;
        c/c++: a里面存的值变成了300;此时&a依然不变，还是0x1111
        python/java: a重新指向了300;此时id(a)改变，比如是0x2222(该地址为3的内存地址)
"""
a = 300  # a指向300
a = 3  # a指向3
b = 3

print("id(a) :%x" % id(a))  # 十六进制
print("id(b) :%x" % id(b))

if id(a) == id(b):
    print("id(a)==id(b)")

del a  # 删除a的引用后不可再使用a,否则会报错
# print("after del a ,id(a)=",id(a))
