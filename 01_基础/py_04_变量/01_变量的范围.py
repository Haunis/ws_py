"""
局部变量:
    在函数内部定义的变量
    有效范围:函数范围
    生命周期:在函数内部有效,函数执行完后释放

全局变量:
    在函数外部定义的变量,所有函数都可以使用
    在函数内部可以通过对全局变量的引用使用其数据,但不可以直接修改全局变量的引用.就是不可通过赋值语句修改全局变量的值,简单说就是可读但不可写.
    如果在函数内部强行对全局变量进行赋值,并不能成功,只是定义一个局部变量而已
    (c/c++可以在函数内部修改全局变量的值)

函数内部修改全局变量:
    变量使用global修饰即可,告诉解释器此变量是全局变量,不是新创建的局部变量
    如果变量指向的地址不变可以不加global修饰,如list

全局变量建议定义的位置:
    定义在所有函数上方,这样所有函数都能访问的到

全局变量命名建议:
    使用"g_"或者"gl_"开头

函数在使用变量时查找规则:
    如果在函数内部有定义过就直接使用,未定义就到外部查找全局变量

"""

gl_num = 12  # 全局变量
num_list = [11, 22]
print("id(gl_num)=%#x" % id(gl_num))


def modify_num():
    global gl_num  # 告诉解释器此变量是全局变量不是局部变量;修改此值,会直接修改全局变量的值
    gl_num = 8888  # 如果不使用 global修饰,此变量只是定义一个局部变量,修改此值不会修改全局变量的值
    print("modify_num ,gl_num=%d, id(num_global)=%#x" % (gl_num, id(gl_num)))
    num_list.append(33)  # num_list指向的地址不变,可以不加global修饰
    num_list.extend([100, 200])


modify_num()
print("num_global=%d, id(gl_num)=%#x" % (gl_num, id(gl_num)))  # 还是12

print(num_list)
